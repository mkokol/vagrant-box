# -*- mode: ruby -*-
# vi: set ft=ruby :
require 'rubygems'
require 'bundler'

Bundler.require
require 'multi_json'

Vagrant::Config.run do |config|
  config.vm.box = "debian_squeeze_32"
  config.vm.box_url = "~/debian_squeeze_32.box"

  # Boot with a GUI so you can see the screen. (Default is headless)
  # config.vm.boot_mode = :gui

  config.vm.network :hostonly, "192.168.56.11"
  config.vm.network :bridged, :bridge => "eth0"

  config.vm.forward_port 80, 8080

  config.vm.share_folder "www", "/var/www", "/mnt/box-www", :create => true



  # Enable provisioning with chef solo, specifying a cookbooks path, roles
  # path, and data_bags path (all relative to this Vagrantfile), and adding 
  # some recipes and/or roles.
  #

  VAGRANT_JSON = MultiJson.load(Pathname(__FILE__).dirname.join('vagrant.json').read)
  config.vm.provision :chef_solo do |chef|
    chef.json = VAGRANT_JSON
    VAGRANT_JSON['run_list'].each do |recipe|
      chef.add_recipe(recipe)
    end if VAGRANT_JSON['run_list']
  end

  # Enable provisioning with chef server, specifying the chef server URL,
  # and the path to the validation key (relative to this Vagrantfile).
  #
  # The Opscode Platform uses HTTPS. Substitute your organization for
  # ORGNAME in the URL and validation key.
  #
  # If you have your own Chef Server, use the appropriate URL, which may be
  # HTTP instead of HTTPS depending on your configuration. Also change the
  # validation key to validation.pem.
  #
  # config.vm.provision :chef_client do |chef|
  #   chef.chef_server_url = "https://api.opscode.com/organizations/ORGNAME"
  #   chef.validation_key_path = "ORGNAME-validator.pem"
  # end
  #
  # If you're using the Opscode platform, your validator client is
  # ORGNAME-validator, replacing ORGNAME with your organization name.
  #
  # IF you have your own Chef Server, the default validation client name is
  # chef-validator, unless you changed the configuration.
  #
  #   chef.validation_client_name = "ORGNAME-validator"
end
