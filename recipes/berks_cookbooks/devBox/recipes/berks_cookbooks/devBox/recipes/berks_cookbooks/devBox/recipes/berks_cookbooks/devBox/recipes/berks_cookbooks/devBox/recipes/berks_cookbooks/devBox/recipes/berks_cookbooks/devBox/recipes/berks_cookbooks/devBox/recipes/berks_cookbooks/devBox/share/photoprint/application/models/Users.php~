<?php

class Users extends Model
{

    public static $_tableName = 'users';

    static function getUserMenuItems(){
        $manuItems = array(
            array('name' => 'user_menu_my_info', 'url' => '/user/info'),
            array('name' => 'user_menu_my_photo', 'url' => '/user/galery'),
            array('name' => 'user_menu_basket', 'url' => '/user/basket'),
            array('name' => 'user_menu_partnership', 'url' => '/partnership')
        );
        $auth = Zend_Auth::getInstance();
        if ($auth->hasIdentity()) {
            $userDate = $auth->getIdentity();
            if($userDate->permission == 'admin'){
                $manuItems = array_merge($manuItems, array(
                    array('name' => 'user_menu_orders', 'url' => '/admin/orders'),
                    array('name' => 'user_menu_photo', 'url' => '/admin/photo'),
                    array('name' => 'user_menu_thems', 'url' => '/admin/thems'),
                    array('name' => 'user_menu_categories', 'url' => '/admin/categories'),
                    array('name' => 'user_menu_products', 'url' => '/admin/products'),
                    array('name' => 'user_menu_payout', 'url' => '/admin/payout')
                ));
            }
        }
        return $manuItems;
    }

    static function getCarrentUserId(){
        $auth = Zend_Auth::getInstance();
        $userId = "not_exist_user";
        if ($auth->hasIdentity()) {
            $userDate = $auth->getIdentity();
            $userId = $userDate->id;
        } else {
            $userId = Session::getSessionId();
        }
        return $userId;
    }

    static function login($email, $password){
        $dbAdapter = Zend_Db_Table_Abstract::getDefaultAdapter();
        $authAdapter = new Zend_Auth_Adapter_DbTable($dbAdapter);
        $authAdapter->setTableName('users');
        $authAdapter->setIdentityColumn('email');
        $authAdapter->setCredentialColumn('password');
        $authAdapter->setIdentity($email);
        $authAdapter->setCredential(md5($password));
        $auth = Zend_Auth::getInstance();
        $auth_result = $auth->authenticate($authAdapter);
        $result = array();
        if ($auth_result->isValid()) {
            $data = $authAdapter->getResultRowObject();
            Session::getInstance()->setData(array('auth' => $data));
            $auth->getStorage()->write($data);
            return true;
        }
        return false;
    }

    static function checkLogin($value) {
        $users = new Users();
        $userList = $users->fetchAll("user_name = '$value'")->toArray();
        if (count($userList) > 0) {
            return $userList[0]['id'];
        }
        return 0;
    }

    static function getUserIdByHash($value) {
        $users = new Users();
        $userList = $users->fetchAll("hash = '$value'")->toArray();
        if (count($userList) === 1) {
            return $userList[0]['id'];
        }
        return 0;
    }

    static function getInfoByEmail($value) {
        $users = new Users();
        $userList = $users->fetchAll("email = '$value'")->toArray();
        if (count($userList) > 0) {
            return $userList[0];
        }
        return 0;
    }

    static function checkEmail($value) {
        $users = new Users();
        $userList = $users->fetchAll("email = '$value'")->toArray();
        if (count($userList) > 0) {
            return $userList[0]['id'];
        }
        return 0;
    }

    function acceptUserShopRules(){
        $auth = Zend_Auth::getInstance();
        if ($auth->hasIdentity()) {
            $userDate = $auth->getIdentity();
            $shopCode = substr(md5($userDate->id.$userDate->created), 0, 9);
            $this->update(
                array(
                    'shop_code' => $shopCode,
                    'accept_shop_rules' => 1
                ),
                "id = '$userDate->id'"
            );
            $userDate->shop_code = $shopCode;
            $userDate->accept_shop_rules = 1;
            return true;
        }
        return false;
    }
}
